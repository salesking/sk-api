= SalesKing Api

This plugin is used internally by SalesKing to deliver the API and 
can be used externally as an API client. The code is used in production f.ex.at
https://www.SalesKing, http://texprovider.de and http://planio.de

The SalesKing API client uses ActiveResource, with some fixes due to json parsing.
For now it only supports JSON, XML comes later.

To be able to use the API you must have an SalesKing account and API access. 
Than you can start writing your own middelware-stack.

== Install

if you try to use it please tell us, so we can provide you a login on our dev system
and support.

    gem install sk-api

== Usage

SalesKing's api interface is RESTful(mostly) and returns & accepts JSON data.
All resources such as clients, invoices, products can be accessed via URL's
through standard HTTP methods GET, POST, PUT and DELETE.

To give it quick shot, point your browser to my-account.salesking.eu/api/clients.json
(while beeing logged in) and you will see the JSON in the response.
This is an example of a GET-request issued by your browser.

<b>Request Method overview:</b>
GET => read
POST => create new data
PUT => update data
DELETE => delete data

Want to know more about REST style webservices?
* http://en.wikipedia.org/wiki/Representational_State_Transfer
* http://www.google.com/search?q=REST+site%3Awww.infoq.com

=== Authentification & Safety

Authentification is done with HTTP basic using your SalesKing login email and password.
For a production environment it is advisable to create a user, per api
client-software, and restrict his rights with our build in role-system.

=== Toolz

Since browsers do not support PUT/DELETE methods you can use CURL, a linux
command-line http client, for testing. And of course any http library supporting
http-basic-auth can be used.

* JSONView  FF-Plugin - view json in firefox https://addons.mozilla.org/de/firefox/addon/10869/
* JSONovich FF-Plugin -  https://addons.mozilla.org/de/firefox/addon/10122/
* A java GUI REST client http://code.google.com/p/rest-client/

=== GET / Show data

Get a list of resources:
    GET xy.salesking.eu/api/invoices

Get a single resource
    GET xy.salesking.eu/invoices/:id

Using CURL

  curl -u your@login-mail.com:password \
  https://demo.salesking.eu/clients.json

Returned JSON data for a listings, abbreviated:
    {
    "clients": [                    # array of resources => clients
      { "client": {                 # a single resource
        "number": "0800013", ..
        "links":{}                  #links to actions for the resource (comming soon)
      }, ...
    ],
    collection": {                  # information about the collection
      "total_pages": 1,
      "total_entries": 3,
      "current_page": 1,
      "per_page": 30
    },
    "links": {                      # links for the collection
      "prev": "/api/clients?page=0",
      "next": "/api/clients?page=2",
      "self": "/api/clients?page=1"
      }, 
    }

==== Filtering

Filtering data can be achived by adding a filter parameter to the url. 

All objects which can be tagged(clients, documents, products) can be filter by a tag param, taking one or multiple tags:
    GET xy.salesking.eu/api/invoices?filter[tags]=Agentur
    GET xy.salesking.eu/api/invoices?filter[tags]=Agentur Grafik
    # find all objects without tags
    GET xy.salesking.eu/api/invoices?filter[not_tagged]=1

All objects have a q-search available. The fields to be searched in can be seen inside SalesKing, behind the search field above list.
    GET xy.salesking.eu/api/invoices?q=0800013
    GET xy.salesking.eu/api/invoices?filter[q]=0800013

Document specific filters
  # find all documents for a client
  GET xy.salesking.eu/api/invoices?filter[client]=:client_id

Client filter:
  # find clients organisation or lastname starting with A
  GET xy.salesking.eu/api/clients?filter[letter]=A

=== POST / Create data

To create a resource you can use the gem with its methods or make a POST request containing the json for a single resource.
The JSON format can be seen in each of the resources: http://github.com/salesking/sk-api/tree/master/lib/resources/

  POST https://my-sub.salesking.eu/invoices.json content-type application/json

This a minimal json to create a draft invoice:

  {"invoice": {
    "due_days": 14,
    "line_items": [
      {
          "quantity_unit": "Stuck",
          "tax": 19,
          "price_single": 0,
          "position": 1,
          "quantity": 21,
          "description": "dep38usabq4Boxen kostenlos"
      },
      {
        "quantity_unit": "Stuck",
        "tax": 19,
        "price_single": 0.042022,
        "position": 2,
        "quantity": 21,
        "description": "dep38usabq4 Boxen"
      }
    ],
    "title": "Dabei",
    "client_id": "c5d5xIwZGr3R56abxfpGMl",
    "address_field": "Wurst Bolle\nHalve-Hahn Alle 4711\n50733 Köln-Nippes"
  }}

Some quick hints on document creation:

* The line items array does not need prefixes .. (sry little inconsistency here)
* Dates are formatted like  <tt>yyyy-mm-dd 2010-09-08</tt>
* <tt>"price_total": 0.88,  "price_tax": 0.167</tt> can be ommited are calculated by sk => read only
* <tt>due_date</tt> if left out will be auto calculated from due days. If date and due date are given due_days are not taken into consideration.
* <tt>status: draft</tt> is default, so can be omitted
* <tt>client_id</tt> must be given as uuid of the client object
* line items with quantity of 0 are kicked
* If you create the doc as draft you can leave out any dates. When “opened” in salesking the date will be set and due date is calculated from due_days
* If you create the invoice as "open" you must set a number(and date), by now there is no api method to get the next number.
* The proposed workflow is to create the document as draft and continue (open/send/close) in SalesKing.


For more information on how to use take a look into the tests/specs:

http://github.com/salesking/sk-api/tree/master/spec/resources/

=== PUT / Update data

To Update a client:
 
PUT ( application/json ) to ../api/clients/:id
  {
    'client': 
    { 
      'gender':'male',
      'first_name': "Andrew"
    }
  }

=== DELETE / kill data

To delete a record simply issue a DELETE request to a resource url:

    DELETE https://demo.salesking.eu/clients/:id

== Ruby Example

Since the sk-api gem provides a wrapper around the whole url/request stuff its
pretty straight forward to use:

    class SomeMiddleware
      include SKApi::Resources

      def initialize()
        # init api connection => just an example depending on your code structure do it wherever you want
        set_api_connection
      end

      def create_client(last_name)
        # create a new client object
        client = SKApi::Resources::Client.new(:last_name=> last_name)
        # set more data
        client.first_name = "Meister"
        # save it, which also does the remote saving action
        client.save
      end

      def set_api_connection
        SKApi::Resources::Base.set_connection({
          :site     => 'my_sub.salesking.eu',
          :user     => 'demo@salesking.eu',
          :password => 'password',
          :format   => :json # symbol expected
        })
      end
    end

    ##### use it
    a = SomeMiddleware.new
    a.create_client('eder')


== Salesking API Resources

Right now the following resources are available:

* clients
* invoices
* products
* credit_notes

See classes here:
http://github.com/salesking/sk-api/tree/master/lib/resources/

== Tests / Specs

To run the test you must insert some credentials into the spec helper. 
We will gladly provide you with a test account on one of our development 
systems.


Copyright (c) 2009, 2010 Georg Leciejewski, released under the MIT license
